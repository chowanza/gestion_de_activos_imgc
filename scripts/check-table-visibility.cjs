const fs = require('fs');

// Leer el archivo de la tabla
const tableContent = fs.readFileSync('./src/components/empleados-table.tsx', 'utf8');

console.log('üîç Verificando configuraci√≥n de visibilidad de la tabla...\n');

// Buscar todas las referencias a email en el archivo
const emailMatches = tableContent.match(/email/g);
console.log(`üìß Referencias a "email" en el archivo: ${emailMatches ? emailMatches.length : 0}`);

// Buscar la configuraci√≥n de columnVisibility
const visibilityMatch = tableContent.match(/columnVisibility.*?{.*?}/s);
if (visibilityMatch) {
  console.log('\nüîç Configuraci√≥n de columnVisibility:');
  console.log(visibilityMatch[0]);
} else {
  console.log('\n‚úÖ No hay configuraci√≥n espec√≠fica de columnVisibility');
}

// Buscar si hay alguna configuraci√≥n que oculte la columna de email
const emailHidden = tableContent.includes('email: false') || 
                   tableContent.includes('email: false') || 
                   tableContent.includes('email: 0') ||
                   tableContent.includes('email: false');

if (emailHidden) {
  console.log('\n‚ùå Se encontr√≥ configuraci√≥n que oculta la columna de email');
} else {
  console.log('\n‚úÖ No se encontr√≥ configuraci√≥n que oculte la columna de email');
}

// Buscar la definici√≥n de la columna de email
const emailColumnMatch = tableContent.match(/accessorKey: "email".*?},/s);
if (emailColumnMatch) {
  console.log('\n‚úÖ Definici√≥n de columna de email encontrada:');
  console.log(emailColumnMatch[0]);
} else {
  console.log('\n‚ùå No se encontr√≥ la definici√≥n de la columna de email');
}

// Buscar si hay alguna configuraci√≥n de visibilidad por defecto
const defaultVisibilityMatch = tableContent.match(/columnVisibility.*?=.*?{.*?}/s);
if (defaultVisibilityMatch) {
  console.log('\nüîç Configuraci√≥n de visibilidad por defecto:');
  console.log(defaultVisibilityMatch[0]);
} else {
  console.log('\n‚úÖ No hay configuraci√≥n de visibilidad por defecto (todas las columnas visibles)');
}
