// scripts/seed-masivo-datos-prueba.ts
// Script para generar datos masivos de prueba para el sistema de gesti√≥n de activos

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// Datos de departamentos adicionales
const departamentosData = [
  'Contabilidad',
  'Comercializaci√≥n', 
  'Recursos Humanos',
  'Operaciones',
  'Mantenimiento',
  'Seguridad',
  'Administraci√≥n',
  'Log√≠stica',
  'Calidad',
  'Desarrollo'
];

// Datos de cargos por departamento
const cargosData = {
  'Contabilidad': [
    'Contador Senior', 'Contador Junior', 'Asistente Contable', 'Analista Financiero', 'Jefe de Contabilidad'
  ],
  'Comercializaci√≥n': [
    'Gerente de Ventas', 'Ejecutivo de Ventas', 'Analista de Mercado', 'Coordinador Comercial', 'Asistente de Ventas'
  ],
  'Recursos Humanos': [
    'Gerente de RRHH', 'Especialista en Reclutamiento', 'Analista de N√≥mina', 'Coordinador de Capacitaci√≥n', 'Asistente de RRHH'
  ],
  'Operaciones': [
    'Gerente de Operaciones', 'Supervisor de Operaciones', 'Coordinador Operativo', 'Analista de Procesos', 'Operador'
  ],
  'Mantenimiento': [
    'Jefe de Mantenimiento', 'T√©cnico Senior', 'T√©cnico Junior', 'Especialista en Equipos', 'Asistente de Mantenimiento'
  ],
  'Seguridad': [
    'Jefe de Seguridad', 'Supervisor de Seguridad', 'Guardia Senior', 'Guardia Junior', 'Coordinador de Seguridad'
  ],
  'Administraci√≥n': [
    'Gerente Administrativo', 'Asistente Ejecutivo', 'Coordinador Administrativo', 'Analista Administrativo', 'Secretario'
  ],
  'Log√≠stica': [
    'Gerente de Log√≠stica', 'Coordinador de Almac√©n', 'Analista de Inventario', 'Especialista en Distribuci√≥n', 'Asistente Log√≠stico'
  ],
  'Calidad': [
    'Gerente de Calidad', 'Auditor de Calidad', 'Analista de Calidad', 'Coordinador de Calidad', 'Inspector de Calidad'
  ],
  'Desarrollo': [
    'Desarrollador Senior', 'Desarrollador Junior', 'Arquitecto de Software', 'Analista de Sistemas', 'Tester'
  ],
  'Telem√°tica': [
    'Ingeniero de Sistemas', 'Administrador de Redes', 'Especialista en Telecomunicaciones', 'T√©cnico en Sistemas', 'Analista de IT'
  ]
};

// Nombres y apellidos para generar empleados
const nombres = [
  'Carlos', 'Mar√≠a', 'Jos√©', 'Ana', 'Luis', 'Carmen', 'Pedro', 'Isabel', 'Miguel', 'Rosa',
  'Antonio', 'Elena', 'Francisco', 'Pilar', 'Manuel', 'Dolores', 'David', 'Cristina', 'Javier', 'M√≥nica',
  'Rafael', 'Teresa', 'Fernando', 'Patricia', 'Sergio', 'Laura', 'Alejandro', 'Sandra', 'Roberto', 'Natalia',
  'Daniel', 'Beatriz', 'Pablo', 'Silvia', '√Ålvaro', 'Raquel', 'Rub√©n', 'Eva', 'Iv√°n', 'Marta',
  'Adri√°n', 'Claudia', '√ìscar', 'Luc√≠a', 'H√©ctor', 'Paula', 'V√≠ctor', 'Andrea', 'Jorge', 'Sara'
];

const apellidos = [
  'Garc√≠a', 'Rodr√≠guez', 'Gonz√°lez', 'Fern√°ndez', 'L√≥pez', 'Mart√≠nez', 'S√°nchez', 'P√©rez', 'G√≥mez', 'Mart√≠n',
  'Jim√©nez', 'Ruiz', 'Hern√°ndez', 'D√≠az', 'Moreno', 'Mu√±oz', '√Ålvarez', 'Romero', 'Alonso', 'Guti√©rrez',
  'Navarro', 'Torres', 'Dom√≠nguez', 'V√°zquez', 'Ramos', 'Gil', 'Ram√≠rez', 'Serrano', 'Blanco', 'Su√°rez',
  'Molina', 'Morales', 'Ortega', 'Delgado', 'Castro', 'Ortiz', 'Rubio', 'Mar√≠n', 'Sanz', 'Iglesias',
  'Medina', 'Cort√©s', 'Garrido', 'Castillo', 'Santos', 'Lozano', 'Guerrero', 'Cano', 'Prieto', 'M√©ndez'
];

// Estados de equipos
const estadosEquipos = ['Resguardo', 'Asignado', 'Operativo', 'En Reparaci√≥n', 'De Baja'];

// Ubicaciones adicionales
const ubicacionesData = [
  { nombre: 'Oficina Principal', descripcion: 'Edificio principal de la empresa', direccion: 'Av. Principal 123', piso: '1', sala: 'A' },
  { nombre: 'Piso 2 - Administraci√≥n', descripcion: 'Piso administrativo', direccion: 'Av. Principal 123', piso: '2', sala: 'B' },
  { nombre: 'Piso 3 - Operaciones', descripcion: '√Årea de operaciones', direccion: 'Av. Principal 123', piso: '3', sala: 'C' },
  { nombre: 'Almac√©n Central', descripcion: 'Almac√©n principal', direccion: 'Av. Principal 123', piso: 'S√≥tano', sala: 'D' },
  { nombre: 'Laboratorio IT', descripcion: 'Laboratorio de tecnolog√≠a', direccion: 'Av. Principal 123', piso: '4', sala: 'E' },
  { nombre: 'Sala de Juntas', descripcion: 'Sala de reuniones ejecutivas', direccion: 'Av. Principal 123', piso: '5', sala: 'F' },
  { nombre: '√Årea de Mantenimiento', descripcion: 'Taller de mantenimiento', direccion: 'Av. Principal 123', piso: 'S√≥tano', sala: 'G' },
  { nombre: 'Oficina de Ventas', descripcion: '√Årea comercial', direccion: 'Av. Principal 123', piso: '2', sala: 'H' }
];

// Proveedores para informaci√≥n de compra
const proveedores = [
  'Dell Technologies', 'HP Inc.', 'Lenovo', 'Apple', 'Microsoft', 'Cisco Systems', 'Samsung', 'LG Electronics',
  'Canon', 'Epson', 'Brother', 'Logitech', 'Intel', 'AMD', 'NVIDIA', 'Western Digital', 'Seagate', 'Kingston',
  'Corsair', 'ASUS', 'Acer', 'MSI', 'Gigabyte', 'EVGA', 'Thermaltake', 'Cooler Master', 'Razer', 'SteelSeries'
];

// Funci√≥n para generar CED aleatorio
function generarCED(): string {
  const numeros = Math.floor(Math.random() * 90000000) + 10000000; // 8 d√≠gitos
  return numeros.toString();
}

// Funci√≥n para generar serial aleatorio
function generarSerial(): string {
  const letras = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const numeros = '0123456789';
  let serial = '';
  
  // 2 letras + 8 n√∫meros
  for (let i = 0; i < 2; i++) {
    serial += letras.charAt(Math.floor(Math.random() * letras.length));
  }
  for (let i = 0; i < 8; i++) {
    serial += numeros.charAt(Math.floor(Math.random() * numeros.length));
  }
  
  return serial;
}

// Funci√≥n para generar c√≥digo IMGC
function generarCodigoIMGC(): string {
  const prefijo = 'IMGC';
  const numeros = Math.floor(Math.random() * 900000) + 100000; // 6 d√≠gitos
  return `${prefijo}${numeros}`;
}

// Funci√≥n para generar fecha aleatoria
function generarFechaAleatoria(): string {
  const a√±o = 2020 + Math.floor(Math.random() * 5); // 2020-2024
  const mes = Math.floor(Math.random() * 12) + 1;
  const dia = Math.floor(Math.random() * 28) + 1;
  return `${a√±o}-${mes.toString().padStart(2, '0')}-${dia.toString().padStart(2, '0')}`;
}

// Funci√≥n para generar monto aleatorio
function generarMonto(): number {
  return Math.floor(Math.random() * 5000) + 500; // $500 - $5500
}

async function main() {
  console.log('üöÄ Iniciando generaci√≥n masiva de datos de prueba...');

  try {
    // 1. Obtener empresas existentes
    const empresas = await prisma.empresa.findMany();
    if (empresas.length === 0) {
      console.log('‚ùå No hay empresas en la base de datos. Creando una empresa por defecto...');
      const empresa = await prisma.empresa.create({
        data: {
          nombre: 'Empresa Demo',
          descripcion: 'Empresa de demostraci√≥n'
        }
      });
      empresas.push(empresa);
    }

    // 2. Crear ubicaciones adicionales
    console.log('üìç Creando ubicaciones adicionales...');
    for (const ubicacionData of ubicacionesData) {
      await prisma.ubicacion.upsert({
        where: { nombre: ubicacionData.nombre },
        update: {},
        create: ubicacionData
      });
    }
    console.log(`‚úÖ ${ubicacionesData.length} ubicaciones procesadas`);

    // 3. Crear departamentos adicionales
    console.log('üè¢ Creando departamentos adicionales...');
    const departamentosCreados = [];
    for (const nombreDept of departamentosData) {
      // Verificar si ya existe
      const departamentoExistente = await prisma.departamento.findFirst({
        where: { 
          nombre: nombreDept,
          empresaId: empresas[0].id
        }
      });

      if (!departamentoExistente) {
        const departamento = await prisma.departamento.create({
          data: {
            nombre: nombreDept,
            empresaId: empresas[0].id
          }
        });
        departamentosCreados.push(departamento);
      } else {
        departamentosCreados.push(departamentoExistente);
      }
    }
    console.log(`‚úÖ ${departamentosCreados.length} departamentos procesados`);

    // 4. Crear cargos para cada departamento
    console.log('üíº Creando cargos...');
    const cargosCreados = [];
    for (const departamento of departamentosCreados) {
      const cargosDelDept = cargosData[departamento.nombre as keyof typeof cargosData] || [];
      for (const nombreCargo of cargosDelDept) {
        // Verificar si ya existe
        const cargoExistente = await prisma.cargo.findFirst({
          where: { 
            nombre: nombreCargo,
            departamentoId: departamento.id
          }
        });

        if (!cargoExistente) {
          const cargo = await prisma.cargo.create({
            data: {
              nombre: nombreCargo,
              descripcion: `Cargo de ${nombreCargo} en ${departamento.nombre}`,
              departamentoId: departamento.id
            }
          });
          cargosCreados.push(cargo);
        } else {
          cargosCreados.push(cargoExistente);
        }
      }
    }
    console.log(`‚úÖ ${cargosCreados.length} cargos procesados`);

    // 5. Crear empleados masivos
    console.log('üë• Creando empleados...');
    const empleadosCreados = [];
    const totalEmpleados = 150; // Generar 150 empleados

    for (let i = 0; i < totalEmpleados; i++) {
      const nombre = nombres[Math.floor(Math.random() * nombres.length)];
      const apellido = apellidos[Math.floor(Math.random() * apellidos.length)];
      const departamento = departamentosCreados[Math.floor(Math.random() * departamentosCreados.length)];
      const cargosDelDept = cargosCreados.filter(c => c.departamentoId === departamento.id);
      const cargo = cargosDelDept[Math.floor(Math.random() * cargosDelDept.length)];

      const empleado = await prisma.empleado.create({
        data: {
          nombre,
          apellido,
          ced: generarCED(),
          fechaNacimiento: generarFechaAleatoria(),
          fechaIngreso: generarFechaAleatoria(),
          departamentoId: departamento.id,
          cargoId: cargo.id
        }
      });
      empleadosCreados.push(empleado);

      if ((i + 1) % 25 === 0) {
        console.log(`  ‚îî‚îÄ ${i + 1}/${totalEmpleados} empleados creados`);
      }
    }
    console.log(`‚úÖ ${totalEmpleados} empleados creados`);

    // 6. Obtener modelos existentes
    const modelos = await prisma.modeloDispositivo.findMany({
      include: { marca: true }
    });
    console.log(`üì± ${modelos.length} modelos disponibles`);

    // 7. Obtener ubicaciones
    const ubicaciones = await prisma.ubicacion.findMany();
    console.log(`üìç ${ubicaciones.length} ubicaciones disponibles`);

    // 8. Crear computadores masivos
    console.log('üíª Creando computadores...');
    const totalComputadores = 200; // Generar 200 computadores

    for (let i = 0; i < totalComputadores; i++) {
      const modelo = modelos[Math.floor(Math.random() * modelos.length)];
      const empleado = empleadosCreados[Math.floor(Math.random() * empleadosCreados.length)];
      const ubicacion = ubicaciones[Math.floor(Math.random() * ubicaciones.length)];
      const estado = estadosEquipos[Math.floor(Math.random() * estadosEquipos.length)];
      const proveedor = proveedores[Math.floor(Math.random() * proveedores.length)];

      const computador = await prisma.computador.create({
        data: {
          serial: generarSerial(),
          estado,
          modeloId: modelo.id,
          empleadoId: Math.random() > 0.3 ? empleado.id : null, // 70% asignados
          departamentoId: empleado.departamentoId,
          ubicacionId: ubicacion.id,
          codigoImgc: generarCodigoIMGC(),
          host: `host-${Math.floor(Math.random() * 1000)}`,
          sisOperativo: ['Windows 10', 'Windows 11', 'Ubuntu 20.04', 'macOS Monterey'][Math.floor(Math.random() * 4)],
          arquitectura: ['32', '64'][Math.floor(Math.random() * 2)],
          ram: `${[4, 8, 16, 32][Math.floor(Math.random() * 4)]} GB`,
          almacenamiento: `${[256, 512, 1024, 2048][Math.floor(Math.random() * 4)]} GB SSD`,
          procesador: `Intel Core i${[3, 5, 7][Math.floor(Math.random() * 3)]}-${Math.floor(Math.random() * 9000) + 1000}`,
          officeVersion: `Microsoft Office ${Math.floor(Math.random() * 3) + 2019}`,
          macWifi: `00:${Math.floor(Math.random() * 100)}:${Math.floor(Math.random() * 100)}:${Math.floor(Math.random() * 100)}:${Math.floor(Math.random() * 100)}:${Math.floor(Math.random() * 100)}`,
          macEthernet: `00:${Math.floor(Math.random() * 100)}:${Math.floor(Math.random() * 100)}:${Math.floor(Math.random() * 100)}:${Math.floor(Math.random() * 100)}:${Math.floor(Math.random() * 100)}`,
          // Informaci√≥n de compra
          fechaCompra: new Date(generarFechaAleatoria()),
          numeroFactura: `FAC-${Math.floor(Math.random() * 100000)}`,
          proveedor,
          monto: generarMonto()
        }
      });

      if ((i + 1) % 50 === 0) {
        console.log(`  ‚îî‚îÄ ${i + 1}/${totalComputadores} computadores creados`);
      }
    }
    console.log(`‚úÖ ${totalComputadores} computadores creados`);

    // 9. Crear dispositivos masivos
    console.log('üì± Creando dispositivos...');
    const totalDispositivos = 150; // Generar 150 dispositivos

    for (let i = 0; i < totalDispositivos; i++) {
      const modelo = modelos[Math.floor(Math.random() * modelos.length)];
      const empleado = empleadosCreados[Math.floor(Math.random() * empleadosCreados.length)];
      const ubicacion = ubicaciones[Math.floor(Math.random() * ubicaciones.length)];
      const estado = estadosEquipos[Math.floor(Math.random() * estadosEquipos.length)];
      const proveedor = proveedores[Math.floor(Math.random() * proveedores.length)];

      const dispositivo = await prisma.dispositivo.create({
        data: {
          serial: generarSerial(),
          estado,
          modeloId: modelo.id,
          empleadoId: Math.random() > 0.4 ? empleado.id : null, // 60% asignados
          departamentoId: empleado.departamentoId,
          ubicacionId: ubicacion.id,
          codigoImgc: generarCodigoIMGC(),
          mac: `00:${Math.floor(Math.random() * 100)}:${Math.floor(Math.random() * 100)}:${Math.floor(Math.random() * 100)}:${Math.floor(Math.random() * 100)}:${Math.floor(Math.random() * 100)}`,
          ip: `192.168.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`,
          // Informaci√≥n de compra
          fechaCompra: new Date(generarFechaAleatoria()),
          numeroFactura: `FAC-${Math.floor(Math.random() * 100000)}`,
          proveedor,
          monto: generarMonto()
        }
      });

      if ((i + 1) % 50 === 0) {
        console.log(`  ‚îî‚îÄ ${i + 1}/${totalDispositivos} dispositivos creados`);
      }
    }
    console.log(`‚úÖ ${totalDispositivos} dispositivos creados`);

    // 10. Crear asignaciones de ejemplo
    console.log('üìã Creando asignaciones de ejemplo...');
    const computadores = await prisma.computador.findMany({
      where: { empleadoId: { not: null } },
      take: 50
    });

    for (const computador of computadores) {
      await prisma.asignaciones.create({
        data: {
          date: new Date(),
          actionType: 'asignacion',
          motivo: 'Asignaci√≥n inicial',
          targetType: 'Usuario',
          targetEmpleadoId: computador.empleadoId,
          itemType: 'Computador',
          computadorId: computador.id,
          notes: `Asignaci√≥n de ${computador.serial} a empleado`
        }
      });
    }
    console.log(`‚úÖ ${computadores.length} asignaciones creadas`);

    console.log('\nüéâ ¬°Generaci√≥n masiva de datos completada exitosamente!');
    console.log('\nüìä Resumen de datos creados:');
    console.log(`  ‚Ä¢ ${ubicacionesData.length} ubicaciones adicionales`);
    console.log(`  ‚Ä¢ ${departamentosData.length} departamentos`);
    console.log(`  ‚Ä¢ ${cargosCreados.length} cargos`);
    console.log(`  ‚Ä¢ ${totalEmpleados} empleados`);
    console.log(`  ‚Ä¢ ${totalComputadores} computadores`);
    console.log(`  ‚Ä¢ ${totalDispositivos} dispositivos`);
    console.log(`  ‚Ä¢ ${computadores.length} asignaciones`);

  } catch (error) {
    console.error('‚ùå Error durante la generaci√≥n de datos:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

main()
  .catch((e) => {
    console.error('Error fatal:', e);
    process.exit(1);
  });
