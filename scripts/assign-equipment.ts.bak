import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  try {
    console.log('üîç Verificando datos disponibles...');

    // 1. Obtener empleados
    const empleados = await prisma.empleado.findMany({
      include: {
        organizaciones: {
          include: {
            departamento: true,
            empresa: true
          }
        }
      }
    });
    console.log(`üë• Empleados disponibles: ${empleados.length}`);

    // 2. Obtener computadores disponibles (sin asignar)
    const computadoresDisponibles = await prisma.computador.findMany({
      where: {
        estado: 'OPERATIVO'
      },
      include: {
        computadorModelos: {
          include: {
            modeloEquipo: {
              include: {
                marcaModelos: {
                  include: {
                    marca: true
                  }
                }
              }
            }
          }
        }
      }
    });
    console.log(`üíª Computadores disponibles: ${computadoresDisponibles.length}`);

    // 3. Obtener dispositivos disponibles (sin asignar)
    const dispositivosDisponibles = await prisma.dispositivo.findMany({
      where: {
        estado: 'OPERATIVO'
      },
      include: {
        dispositivoModelos: {
          include: {
            modeloEquipo: {
              include: {
                marcaModelos: {
                  include: {
                    marca: true
                  }
                }
              }
            }
          }
        }
      }
    });
    console.log(`üì± Dispositivos disponibles: ${dispositivosDisponibles.length}`);

    // 4. Crear asignaciones
    console.log('üîó Creando asignaciones...');
    
    let asignacionesCreadas = 0;
    const totalEquipos = computadoresDisponibles.length + dispositivosDisponibles.length;
    const totalEmpleados = empleados.length;
    
    console.log(`üìä Total equipos: ${totalEquipos}, Total empleados: ${totalEmpleados}`);

    // Asignar computadores primero
    for (let i = 0; i < Math.min(computadoresDisponibles.length, empleados.length); i++) {
      const computador = computadoresDisponibles[i];
      const empleado = empleados[i];
      
      await prisma.computador.update({
        where: { id: computador.id },
        data: {
          empleadoId: empleado.id,
          estado: 'Asignado'
        }
      });
      
      // Nota: Las asignaciones se registran autom√°ticamente en la tabla de computadores
      // La tabla de asignaciones se puede usar para historial de movimientos
      
      asignacionesCreadas++;
      console.log(`  ‚úÖ Computador ${computador.serial} asignado a ${empleado.nombre} ${empleado.apellido}`);
    }

    // Asignar dispositivos a los empleados restantes
    const empleadosRestantes = empleados.slice(computadoresDisponibles.length);
    const dispositivosParaAsignar = dispositivosDisponibles.slice(0, empleadosRestantes.length);
    
    for (let i = 0; i < dispositivosParaAsignar.length; i++) {
      const dispositivo = dispositivosParaAsignar[i];
      const empleado = empleadosRestantes[i];
      
      await prisma.dispositivo.update({
        where: { id: dispositivo.id },
        data: {
          empleadoId: empleado.id,
          estado: 'Asignado'
        }
      });
      
      // Nota: Las asignaciones se registran autom√°ticamente en la tabla de dispositivos
      // La tabla de asignaciones se puede usar para historial de movimientos
      
      asignacionesCreadas++;
      console.log(`  ‚úÖ Dispositivo ${dispositivo.serial} asignado a ${empleado.nombre} ${empleado.apellido}`);
    }

    console.log(`üéâ Total asignaciones creadas: ${asignacionesCreadas}`);
    
    // 5. Verificar resultado final
    const empleadosConEquipos = await prisma.empleado.findMany({
      where: {
        OR: [
          { computadores: { some: {} } },
          { dispositivos: { some: {} } }
        ]
      },
      include: {
        departamento: {
          include: {
            empresa: true
          }
        },
        computadores: {
          include: {
            modelo: {
              include: {
                marca: true
              }
            }
          }
        },
        dispositivos: {
          include: {
            modelo: {
              include: {
                marca: true
              }
            }
          }
        }
      }
    });
    
    console.log(`\nüìã Resumen de asignaciones:`);
    empleadosConEquipos.forEach(empleado => {
      const totalEquipos = empleado.computadores.length + empleado.dispositivos.length;
      const empresaNombre = empleado.departamento?.empresa?.nombre || 'Sin empresa';
      const departamentoNombre = empleado.departamento?.nombre || 'Sin departamento';
      console.log(`  üë§ ${empleado.nombre} ${empleado.apellido} (${empresaNombre} - ${departamentoNombre}): ${totalEquipos} equipos`);
      
      empleado.computadores.forEach(comp => {
        console.log(`    üíª ${comp.modelo.marca.nombre} ${comp.modelo.nombre} (${comp.serial})`);
      });
      
      empleado.dispositivos.forEach(disp => {
        console.log(`    üì± ${disp.modelo.marca.nombre} ${disp.modelo.nombre} (${disp.serial})`);
      });
    });

  } catch (error) {
    console.error('‚ùå Error durante la asignaci√≥n:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main();
