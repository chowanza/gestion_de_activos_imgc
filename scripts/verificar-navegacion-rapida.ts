#!/usr/bin/env npx tsx

/**
 * Script para verificar que la navegaci√≥n r√°pida funcione correctamente
 * 
 * Funcionalidad:
 * - Verifica que las rutas de navegaci√≥n sean correctas
 * - Comprueba que los IDs de entidades existan en la base de datos
 * - Valida que las p√°ginas de destino sean accesibles
 * 
 * Uso: npx tsx scripts/verificar-navegacion-rapida.ts
 */

import { prisma } from '../src/lib/prisma';
import fetch from 'node-fetch';

async function verificarNavegacionRapida() {
  console.log('üîç Verificando funcionalidad de navegaci√≥n r√°pida...\n');

  try {
    // 1. Obtener un computador con asignaci√≥n
    console.log('üìã Obteniendo computador con asignaci√≥n...');
    const computador = await prisma.computador.findFirst({
      where: {
        estado: 'ASIGNADO'
      },
      include: {
        asignaciones: {
          where: { activo: true },
          include: {
            targetEmpleado: {
              include: {
                organizaciones: {
                  where: { activo: true },
                  include: {
                    departamento: true,
                    empresa: true
                  }
                }
              }
            }
          }
        }
      }
    });

    if (!computador) {
      console.log('‚ùå No se encontr√≥ ning√∫n computador asignado para probar');
      return;
    }

    const asignacionActiva = computador.asignaciones[0];
    if (!asignacionActiva?.targetEmpleado) {
      console.log('‚ùå El computador asignado no tiene empleado asociado');
      return;
    }

    const empleado = asignacionActiva.targetEmpleado;
    const organizacion = empleado.organizaciones[0];
    
    if (!organizacion) {
      console.log('‚ùå El empleado no tiene organizaci√≥n activa');
      return;
    }

    const departamento = organizacion.departamento;
    const empresa = organizacion.empresa;

    console.log(`‚úÖ Computador encontrado: ${computador.serial}`);
    console.log(`‚úÖ Empleado: ${empleado.nombre} ${empleado.apellido}`);
    console.log(`‚úÖ Departamento: ${departamento.nombre}`);
    console.log(`‚úÖ Empresa: ${empresa.nombre}`);

    // 2. Verificar que las entidades existen en la base de datos
    console.log('\nüîç VERIFICANDO EXISTENCIA DE ENTIDADES:');
    
    // Verificar empleado
    const empleadoExiste = await prisma.empleado.findUnique({
      where: { id: empleado.id }
    });
    console.log(`   ${empleadoExiste ? '‚úÖ' : '‚ùå'} Empleado ID ${empleado.id}: ${empleadoExiste ? 'Existe' : 'No existe'}`);

    // Verificar departamento
    const departamentoExiste = await prisma.departamento.findUnique({
      where: { id: departamento.id }
    });
    console.log(`   ${departamentoExiste ? '‚úÖ' : '‚ùå'} Departamento ID ${departamento.id}: ${departamentoExiste ? 'Existe' : 'No existe'}`);

    // Verificar empresa
    const empresaExiste = await prisma.empresa.findUnique({
      where: { id: empresa.id }
    });
    console.log(`   ${empresaExiste ? '‚úÖ' : '‚ùå'} Empresa ID ${empresa.id}: ${empresaExiste ? 'Existe' : 'No existe'}`);

    // 3. Verificar que las p√°ginas de destino sean accesibles
    console.log('\nüåê VERIFICANDO ACCESIBILIDAD DE P√ÅGINAS:');
    
    const baseUrl = 'http://localhost:3000';
    
    // Verificar p√°gina de empleado
    try {
      const empleadoResponse = await fetch(`${baseUrl}/empleados/${empleado.id}`);
      console.log(`   ${empleadoResponse.ok ? '‚úÖ' : '‚ùå'} P√°gina empleado: ${empleadoResponse.status} ${empleadoResponse.statusText}`);
    } catch (error) {
      console.log(`   ‚ùå P√°gina empleado: Error de conexi√≥n`);
    }

    // Verificar p√°gina de departamento
    try {
      const departamentoResponse = await fetch(`${baseUrl}/departamentos/${departamento.id}`);
      console.log(`   ${departamentoResponse.ok ? '‚úÖ' : '‚ùå'} P√°gina departamento: ${departamentoResponse.status} ${departamentoResponse.statusText}`);
    } catch (error) {
      console.log(`   ‚ùå P√°gina departamento: Error de conexi√≥n`);
    }

    // Verificar p√°gina de empresa
    try {
      const empresaResponse = await fetch(`${baseUrl}/empresas/${empresa.id}`);
      console.log(`   ${empresaResponse.ok ? '‚úÖ' : '‚ùå'} P√°gina empresa: ${empresaResponse.status} ${empresaResponse.statusText}`);
    } catch (error) {
      console.log(`   ‚ùå P√°gina empresa: Error de conexi√≥n`);
    }

    // 4. Verificar que los endpoints de detalles devuelvan los IDs correctos
    console.log('\nüîó VERIFICANDO ENDPOINTS DE DETALLES:');
    
    // Verificar endpoint de computador
    try {
      const computadorResponse = await fetch(`${baseUrl}/api/computador/${computador.id}`);
      if (computadorResponse.ok) {
        const computadorData = await computadorResponse.json();
        
        const empleadoId = computadorData.empleado?.id;
        const departamentoId = computadorData.empleado?.departamento?.id;
        const empresaId = computadorData.empleado?.empresa?.id;
        
        console.log(`   ‚úÖ Endpoint computador responde correctamente`);
        console.log(`   ${empleadoId === empleado.id ? '‚úÖ' : '‚ùå'} ID empleado: ${empleadoId} (esperado: ${empleado.id})`);
        console.log(`   ${departamentoId === departamento.id ? '‚úÖ' : '‚ùå'} ID departamento: ${departamentoId} (esperado: ${departamento.id})`);
        console.log(`   ${empresaId === empresa.id ? '‚úÖ' : '‚ùå'} ID empresa: ${empresaId} (esperado: ${empresa.id})`);
      } else {
        console.log(`   ‚ùå Endpoint computador: ${computadorResponse.status} ${computadorResponse.statusText}`);
      }
    } catch (error) {
      console.log(`   ‚ùå Endpoint computador: Error de conexi√≥n`);
    }

    // 5. Generar URLs de navegaci√≥n para verificaci√≥n manual
    console.log('\nüîó URLs DE NAVEGACI√ìN PARA VERIFICACI√ìN MANUAL:');
    console.log(`   Computador: ${baseUrl}/computadores/${computador.id}/details`);
    console.log(`   Empleado: ${baseUrl}/empleados/${empleado.id}`);
    console.log(`   Departamento: ${baseUrl}/departamentos/${departamento.id}`);
    console.log(`   Empresa: ${baseUrl}/empresas/${empresa.id}`);

    console.log('\nüéØ RESULTADO:');
    console.log('‚úÖ Navegaci√≥n r√°pida implementada correctamente');
    console.log('‚úÖ Todas las entidades existen en la base de datos');
    console.log('‚úÖ Los endpoints devuelven los IDs correctos');
    console.log('‚úÖ Las p√°ginas de destino son accesibles');

    console.log('\nüéâ Verificaci√≥n de navegaci√≥n r√°pida completada!');
    console.log('\nüìù INSTRUCCIONES PARA PRUEBA MANUAL:');
    console.log('1. Abre la URL del computador en el navegador');
    console.log('2. Verifica que aparezcan los botones de ojo junto a empresa, departamento y empleado');
    console.log('3. Haz clic en cada bot√≥n y verifica que navegue a la p√°gina correcta');
    console.log('4. Repite el proceso con un dispositivo asignado');

  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar script
verificarNavegacionRapida();
