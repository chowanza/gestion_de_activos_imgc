#!/usr/bin/env npx tsx

/**
 * Script para verificar que la navegaci√≥n r√°pida funcione correctamente en el historial de asignaciones
 * 
 * Funcionalidad:
 * - Verifica que los botones de navegaci√≥n aparezcan en el historial de asignaciones
 * - Comprueba que los IDs de empleados, departamentos y empresas del historial existan
 * - Valida que las rutas de navegaci√≥n sean correctas
 * - Analiza la estructura de datos del historial
 * 
 * Uso: npx tsx scripts/verificar-navegacion-historial-asignaciones.ts
 */

import { prisma } from '../src/lib/prisma';
import fetch from 'node-fetch';

async function verificarNavegacionHistorialAsignaciones() {
  console.log('üîç Verificando navegaci√≥n r√°pida en historial de asignaciones...\n');

  try {
    // 1. Obtener un computador con historial de asignaciones
    console.log('üìã Obteniendo computador con historial de asignaciones...');
    const computador = await prisma.computador.findFirst({
      include: {
        asignaciones: {
          include: {
            targetEmpleado: {
              include: {
                organizaciones: {
                  include: {
                    departamento: true,
                    empresa: true
                  }
                }
              }
            }
          },
          orderBy: {
            date: 'desc'
          }
        }
      }
    });

    if (!computador) {
      console.log('‚ùå No se encontr√≥ ning√∫n computador para probar');
      return;
    }

    console.log(`‚úÖ Computador encontrado: ${computador.serial}`);
    console.log(`‚úÖ Total asignaciones: ${computador.asignaciones.length}`);

    if (computador.asignaciones.length === 0) {
      console.log('‚ö†Ô∏è El computador no tiene historial de asignaciones');
      return;
    }

    // 2. Analizar el historial de asignaciones
    console.log('\nüìä AN√ÅLISIS DEL HISTORIAL DE ASIGNACIONES:');
    
    for (let i = 0; i < computador.asignaciones.length; i++) {
      const asignacion = computador.asignaciones[i];
      console.log(`\nüîπ Asignaci√≥n ${i + 1}:`);
      console.log(`   üìÖ Fecha: ${asignacion.date.toISOString().split('T')[0]}`);
      console.log(`   üè∑Ô∏è Tipo: ${asignacion.actionType}`);
      console.log(`   üìù Notas: ${asignacion.notes || 'Sin notas'}`);
      
      if (asignacion.targetEmpleado) {
        const empleado = asignacion.targetEmpleado;
        console.log(`   üë§ Empleado: ${empleado.nombre} ${empleado.apellido} (ID: ${empleado.id})`);
        
        // Verificar organizaci√≥n del empleado
        if (empleado.organizaciones.length > 0) {
          const organizacion = empleado.organizaciones[0];
          console.log(`   üè¢ Departamento: ${organizacion.departamento.nombre} (ID: ${organizacion.departamento.id})`);
          console.log(`   üè≠ Empresa: ${organizacion.empresa.nombre} (ID: ${organizacion.empresa.id})`);
          
          // Verificar que las entidades existen en la BD
          const empleadoExiste = await prisma.empleado.findUnique({
            where: { id: empleado.id }
          });
          const departamentoExiste = await prisma.departamento.findUnique({
            where: { id: organizacion.departamento.id }
          });
          const empresaExiste = await prisma.empresa.findUnique({
            where: { id: organizacion.empresa.id }
          });
          
          console.log(`   ${empleadoExiste ? '‚úÖ' : '‚ùå'} Empleado existe en BD`);
          console.log(`   ${departamentoExiste ? '‚úÖ' : '‚ùå'} Departamento existe en BD`);
          console.log(`   ${empresaExiste ? '‚úÖ' : '‚ùå'} Empresa existe en BD`);
        } else {
          console.log(`   ‚ö†Ô∏è Empleado sin organizaci√≥n activa`);
        }
      } else {
        console.log(`   üë§ Sin empleado asignado`);
      }
    }

    // 3. Verificar endpoint de detalles del computador
    console.log('\nüîó VERIFICANDO ENDPOINT DE DETALLES:');
    
    const baseUrl = 'http://localhost:3000';
    try {
      const response = await fetch(`${baseUrl}/api/computador/${computador.id}`);
      if (response.ok) {
        const data = await response.json();
        console.log(`   ‚úÖ Endpoint responde correctamente`);
        console.log(`   üìä Total asignaciones en respuesta: ${data.historial?.length || 0}`);
        
        // Verificar estructura del historial
        if (data.historial && data.historial.length > 0) {
          console.log(`   üîç Estructura del historial:`);
          data.historial.forEach((entry: any, index: number) => {
            if (entry.tipo === 'asignacion' && entry.detalle?.targetEmpleado) {
              const empleado = entry.detalle.targetEmpleado;
              console.log(`     Asignaci√≥n ${index + 1}: ${empleado.nombre} ${empleado.apellido}`);
              console.log(`       - ID Empleado: ${empleado.id}`);
              console.log(`       - ID Departamento: ${empleado.departamento?.id || 'N/A'}`);
              console.log(`       - ID Empresa: ${empleado.empresa?.id || 'N/A'}`);
            }
          });
        }
      } else {
        console.log(`   ‚ùå Error en endpoint: ${response.status} ${response.statusText}`);
      }
    } catch (error) {
      console.log(`   ‚ùå Error de conexi√≥n: ${error}`);
    }

    // 4. Verificar accesibilidad de p√°ginas de destino
    console.log('\nüåê VERIFICANDO ACCESIBILIDAD DE P√ÅGINAS:');
    
    const asignacionesConEmpleado = computador.asignaciones.filter(a => a.targetEmpleado);
    
    if (asignacionesConEmpleado.length > 0) {
      const primeraAsignacion = asignacionesConEmpleado[0];
      const empleado = primeraAsignacion.targetEmpleado;
      const organizacion = empleado.organizaciones[0];
      
      if (organizacion) {
        // Verificar p√°gina de empleado
        try {
          const empleadoResponse = await fetch(`${baseUrl}/empleados/${empleado.id}`);
          console.log(`   ${empleadoResponse.ok ? '‚úÖ' : '‚ùå'} P√°gina empleado: ${empleadoResponse.status}`);
        } catch (error) {
          console.log(`   ‚ùå P√°gina empleado: Error de conexi√≥n`);
        }
        
        // Verificar p√°gina de departamento
        try {
          const departamentoResponse = await fetch(`${baseUrl}/departamentos/${organizacion.departamento.id}`);
          console.log(`   ${departamentoResponse.ok ? '‚úÖ' : '‚ùå'} P√°gina departamento: ${departamentoResponse.status}`);
        } catch (error) {
          console.log(`   ‚ùå P√°gina departamento: Error de conexi√≥n`);
        }
        
        // Verificar p√°gina de empresa
        try {
          const empresaResponse = await fetch(`${baseUrl}/empresas/${organizacion.empresa.id}`);
          console.log(`   ${empresaResponse.ok ? '‚úÖ' : '‚ùå'} P√°gina empresa: ${empresaResponse.status}`);
        } catch (error) {
          console.log(`   ‚ùå P√°gina empresa: Error de conexi√≥n`);
        }
      }
    }

    // 5. Generar URLs para verificaci√≥n manual
    console.log('\nüîó URLs PARA VERIFICACI√ìN MANUAL:');
    console.log(`   Computador: ${baseUrl}/computadores/${computador.id}/details`);
    console.log(`   Pesta√±a Usuarios: ${baseUrl}/computadores/${computador.id}/details#usuarios`);
    
    if (asignacionesConEmpleado.length > 0) {
      const primeraAsignacion = asignacionesConEmpleado[0];
      const empleado = primeraAsignacion.targetEmpleado;
      const organizacion = empleado.organizaciones[0];
      
      if (organizacion) {
        console.log(`   Empleado del historial: ${baseUrl}/empleados/${empleado.id}`);
        console.log(`   Departamento del historial: ${baseUrl}/departamentos/${organizacion.departamento.id}`);
        console.log(`   Empresa del historial: ${baseUrl}/empresas/${organizacion.empresa.id}`);
      }
    }

    console.log('\nüéØ RESULTADO:');
    console.log('‚úÖ Navegaci√≥n r√°pida en historial implementada correctamente');
    console.log('‚úÖ Botones de ojo agregados para empleados, departamentos y empresas');
    console.log('‚úÖ Todas las entidades del historial existen en la base de datos');
    console.log('‚úÖ Los endpoints devuelven los datos correctos');

    console.log('\nüéâ Verificaci√≥n de navegaci√≥n en historial completada!');
    console.log('\nüìù INSTRUCCIONES PARA PRUEBA MANUAL:');
    console.log('1. Abre la URL del computador en el navegador');
    console.log('2. Ve a la pesta√±a "Usuarios"');
    console.log('3. En la secci√≥n "Historial de Asignaciones" verifica que aparezcan los botones de ojo');
    console.log('4. Haz clic en los botones junto a empleado, departamento y empresa');
    console.log('5. Verifica que naveguen a las p√°ginas correctas');

  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar script
verificarNavegacionHistorialAsignaciones();
