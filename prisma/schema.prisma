generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// --- CONSTANTES DE ESTADO ---
// Estados cuando NO está asignado: OPERATIVO, DE_BAJA, EN_RESGUARDO
// Estados cuando SÍ está asignado: ASIGNADO, EN_MANTENIMIENTO

// --- DATOS MAESTROS DE EQUIPOS ---
model Marca {
  id      String @id @default(uuid())
  nombre  String @unique

  // Relaciones normalizadas
  marcaModelos MarcaModeloEquipo[]
}

model ModeloEquipo {
  id     String  @id @default(uuid())
  nombre String
  tipo   String
  img    String?

  // Relaciones normalizadas
  marcaModelos           MarcaModeloEquipo[]
  computadorModelos      ComputadorModeloEquipo[]
  dispositivoModelos     DispositivoModeloEquipo[]
}

// --- ESTRUCTURAS ORGANIZACIONALES ---
model Ubicacion {
  id          String  @id @default(uuid())
  nombre      String  @unique
  descripcion String?
  direccion   String?
  piso        String?
  sala        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  asignacionesEquipos AsignacionesEquipos[]
}

model Empresa {
  id          String   @id @default(uuid())
  nombre      String   @unique
  descripcion String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones normalizadas
  empresaDepartamentos         EmpresaDepartamento[]
  empleadoOrganizaciones       EmpleadoEmpresaDepartamentoCargo[]
}

model Departamento {
  id        String   @id @default(uuid())
  nombre    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones normalizadas
  empresaDepartamentos         EmpresaDepartamento[]
  departamentoCargos           DepartamentoCargo[]
  empleadoOrganizaciones       EmpleadoEmpresaDepartamentoCargo[]
  gerencias                    DepartamentoGerente[]
}

model Cargo {
  id          String   @id @default(uuid())
  nombre      String
  descripcion String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones normalizadas
  departamentoCargos     DepartamentoCargo[]
  empleadoOrganizaciones EmpleadoEmpresaDepartamentoCargo[]
}

model Empleado {
  id                    String  @id @default(uuid())
  nombre                String
  apellido              String
  ced                   String
  email                 String?
  telefono              String?
  direccion             String?
  fechaNacimiento       String?
  fechaIngreso          String?
  fechaDesincorporacion String?
  fotoPerfil            String? @db.Text

  // Relaciones normalizadas (eliminamos las FK directas)
  organizaciones          EmpleadoEmpresaDepartamentoCargo[]
  asignacionesComoTarget  AsignacionesEquipos[]              @relation("TargetEmpleado")
  asignacionesComoGerente AsignacionesEquipos[]              @relation("GerenteEmpleado")
  gerencias               DepartamentoGerente[]
  statusHistory           EmpleadoStatusHistory[]
}

// --- EQUIPOS (sin FK a modelo) ---
model Computador {
  id                String    @id @default(uuid())
  serial            String    @unique
  estado            String    @default("OPERATIVO")
  codigoImgc        String    // OBLIGATORIO
  host              String?
  
  // Información de compra
  fechaCompra       DateTime?
  numeroFactura     String?
  proveedor         String?
  monto             Decimal?
  
  // Sistema Operativo
  sisOperativo      String?
  arquitectura      String?
  
  // Hardware
  procesador        String?
  ram               String?
  almacenamiento    String?
  macWifi           String?
  macEthernet       String?
  
  // Software
  officeVersion     String?
  anydesk           String?

  // Relaciones normalizadas
  computadorModelos       ComputadorModeloEquipo[]
  asignaciones            AsignacionesEquipos[]
  historialModificaciones HistorialModificaciones[]
  intervenciones          IntervencionesEquipos[]
}

model Dispositivo {
  id            String    @id @default(uuid())
  serial        String    @unique
  estado        String    @default("OPERATIVO")
  mac           String?
  ip            String?
  codigoImgc    String    // OBLIGATORIO
  
  // Información de compra
  fechaCompra   DateTime?
  numeroFactura String?
  proveedor     String?
  monto         Decimal?

  // Relaciones normalizadas
  dispositivoModelos DispositivoModeloEquipo[]
  asignaciones       AsignacionesEquipos[]
  intervenciones     IntervencionesEquipos[]
}

model User {
  id       String @id @default(uuid())
  username String @unique
  password String
  role     String @default("viewer")

  // Relaciones
  movimientos HistorialMovimientos[]
  intervenciones IntervencionesEquipos[]
}

// --- TABLAS DE RELACION NORMALIZADAS ---
model MarcaModeloEquipo {
  marcaId       String
  modeloEquipoId String

  marca        Marca        @relation(fields: [marcaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modeloEquipo ModeloEquipo @relation(fields: [modeloEquipoId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([marcaId, modeloEquipoId])
}

model EmpresaDepartamento {
  empresaId        String
  departamentoId   String
  fechaAsignacion  DateTime @default(now())
  activo           Boolean  @default(true)

  empresa      Empresa      @relation(fields: [empresaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  departamento Departamento @relation(fields: [departamentoId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([empresaId, departamentoId])
}

model DepartamentoCargo {
  departamentoId  String
  cargoId         String
  fechaCreacion   DateTime @default(now())
  activo          Boolean  @default(true)

  departamento Departamento @relation(fields: [departamentoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cargo        Cargo        @relation(fields: [cargoId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([departamentoId, cargoId])
}

// TABLA CENTRAL - REEMPLAZA LAS FK EN EMPLEADO
model EmpleadoEmpresaDepartamentoCargo {
  empleadoId          String
  empresaId           String
  departamentoId      String
  cargoId             String
  fechaAsignacion     DateTime  @default(now())
  fechaDesasignacion  DateTime?
  activo              Boolean   @default(true)

  empleado     Empleado     @relation(fields: [empleadoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  empresa      Empresa      @relation(fields: [empresaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  departamento Departamento @relation(fields: [departamentoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cargo        Cargo        @relation(fields: [cargoId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([empleadoId, empresaId, departamentoId, cargoId])
}

model ComputadorModeloEquipo {
  computadorId   String
  modeloEquipoId String

  computador   Computador   @relation(fields: [computadorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modeloEquipo ModeloEquipo @relation(fields: [modeloEquipoId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([computadorId, modeloEquipoId])
}

model DispositivoModeloEquipo {
  dispositivoId    String
  modeloEquipoId   String
  tipoDispositivo  String?

  dispositivo  Dispositivo  @relation(fields: [dispositivoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modeloEquipo ModeloEquipo @relation(fields: [modeloEquipoId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([dispositivoId, modeloEquipoId])
}

// ASIGNACIONES MEJORADAS
model AsignacionesEquipos {
  id                String    @id @default(uuid())
  date              DateTime  @default(now())
  notes             String?
  actionType        String
  motivo            String?
  targetType        String
  itemType          String
  evidenciaFotos    String?   // URLs de imágenes separadas por comas
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  activo            Boolean   @default(true)

  // Relaciones opcionales
  targetEmpleadoId  String?
  computadorId      String?
  dispositivoId     String?
  gerenteId         String?
  ubicacionId       String?

  targetEmpleado    Empleado?   @relation("TargetEmpleado", fields: [targetEmpleadoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  computador        Computador? @relation(fields: [computadorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dispositivo       Dispositivo? @relation(fields: [dispositivoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  gerenteEmpleado   Empleado?   @relation("GerenteEmpleado", fields: [gerenteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ubicacion         Ubicacion?  @relation(fields: [ubicacionId], references: [id], onDelete: SetNull, onUpdate: NoAction)
}

model DepartamentoGerente {
  departamentoId      String
  gerenteId           String
  fechaAsignacion     DateTime  @default(now())
  fechaDesasignacion  DateTime?
  activo              Boolean   @default(true)

  departamento Departamento @relation(fields: [departamentoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  gerente      Empleado     @relation(fields: [gerenteId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([departamentoId, gerenteId])
}

// --- HISTORIAL Y AUDITORIA (mantienen estructura original) ---
model HistorialModificaciones {
  id            String   @id @default(uuid())
  fecha         DateTime @default(now())
  campo         String
  valorAnterior String?
  valorNuevo    String?
  computadorId  String

  computador Computador @relation(fields: [computadorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([computadorId])
}

model HistorialMovimientos {
  id          String   @id @default(uuid())
  fecha       DateTime @default(now())
  accion      String
  entidad     String
  entidadId   String?
  descripcion String
  detalles    String?
  usuarioId   String?
  ipAddress   String?
  userAgent   String?

  usuario User? @relation(fields: [usuarioId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([fecha])
  @@index([accion])
  @@index([entidad])
  @@index([usuarioId])
}

// INTERVENCIONES Y EVIDENCIA FOTOGRÁFICA
model IntervencionesEquipos {
  id                String    @id @default(uuid())
  fecha             DateTime  @default(now())
  notas             String?
  evidenciaFotos    String?   // URLs de imágenes separadas por comas
  computadorId      String?
  dispositivoId     String?
  usuarioId         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  computador Computador? @relation(fields: [computadorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dispositivo Dispositivo? @relation(fields: [dispositivoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuario User? @relation(fields: [usuarioId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([fecha])
  @@index([computadorId])
  @@index([dispositivoId])
}

model EmpleadoStatusHistory {
  id          String   @id @default(uuid())
  empleadoId  String
  accion      String
  fecha       String
  motivo      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  empleado Empleado @relation(fields: [empleadoId], references: [id], onDelete: Cascade)
}